import requests
from urllib3.exceptions import HTTPError
import dotenv
import os
from save_apod import save_apod
from save_epic import save_EPIC
from spacex import fetch_spacex_last_launch
import urllib3
import ptbot
import telegram
import random
from glob import glob
import time
from PIL import Image
import io

bot = telegram.Bot(token='7036452912:AAEFRVX2SCkXPr4HvT41LB4oUq7d7lJ1jrc')
chat_id = "-1002572466444"

 

API_URL = 'https://api.spacexdata.com/v5/launches/'
response = requests.get(API_URL)
response.raise_for_status()
image_urls = []


PUBLISH_INTERVAL_HOURS = 4 # –ó–¥–µ—Å—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —á–∞—Å–∞—Ö (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
MAX_IMAGE_SIZE_MB = 10         # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ (–ú–ë)
IMAGE_QUALITY = 85             # –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è (1-100)

def get_image_paths(directory="images"):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ –∏ –ø–æ–¥–ø–∞–ø–∫–∞—Ö, –≤–∫–ª—é—á–∞—è EPIC"""
    image_extensions = ['*.jpg', '*.jpeg', '*.png', '*.gif']
    images = []
    
    for ext in image_extensions:
        images.extend(glob(os.path.join(directory, '**', ext), recursive=True))
    
    return images

def compress_if_needed(image_path):
    """–°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–µ MAX_IMAGE_SIZE_MB"""
    file_size = os.path.getsize(image_path) / (1024 * 1024)  # –†–∞–∑–º–µ—Ä –≤ –ú–ë
    
    if file_size <= MAX_IMAGE_SIZE_MB:
        return open(image_path, 'rb')
    
    try:
        with Image.open(image_path) as img:
            output = io.BytesIO()
            img.save(output, format='JPEG', quality=IMAGE_QUALITY, optimize=True)
            new_size = len(output.getvalue()) / (1024 * 1024)
            print(f"–°–∂–∞—Ç–æ: {file_size:.1f}–ú–ë ‚Üí {new_size:.1f}–ú–ë")
            
            return output
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è {image_path}: {e}")
        return open(image_path, 'rb')

def publish_images():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ"""
    image_paths = get_image_paths()
    
    if not image_paths:
        print("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!üåå ")
        return
    
    interval_seconds = PUBLISH_INTERVAL_HOURS * 3600
    
    while True:
        random.shuffle(image_paths)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤
        
        for image_path in image_paths:
            try:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ç–æ
                photo = compress_if_needed(image_path)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞
                bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=f"üåå {os.path.basename(image_path)}"
                )
                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {image_path}")
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª/–±—É—Ñ–µ—Ä
                if hasattr(photo, 'close'):
                    photo.close()
                
                time.sleep(interval_seconds)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {image_path}: {e}")
                time.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ


def main():


    dotenv.load_dotenv()
    fetch_spacex_last_launch("images")
    save_apod()
    save_EPIC()
    updates = bot.get_updates()
    print(bot.get_me())
    print(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {PUBLISH_INTERVAL_HOURS} —á")
    print(f"ü§ñ –ë–æ—Ç: {bot.get_me()}")
    publish_images()




if __name__ == "__main__":
    main()